// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tutorial.info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tutorial.info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

namespace {

const ::google::protobuf::Descriptor* PointLLHA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointLLHA_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleHeartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleHeartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleRoutingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleRoutingInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tutorial_2einfo_2eproto() {
  protobuf_AddDesc_tutorial_2einfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tutorial.info.proto");
  GOOGLE_CHECK(file != NULL);
  PointLLHA_descriptor_ = file->message_type(0);
  static const int PointLLHA_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLHA, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLHA, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLHA, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLHA, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLHA, timestamp_sec_),
  };
  PointLLHA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointLLHA_descriptor_,
      PointLLHA::default_instance_,
      PointLLHA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLHA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointLLHA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointLLHA));
  VehicleHeartbeat_descriptor_ = file->message_type(1);
  static const int VehicleHeartbeat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleHeartbeat, is_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleHeartbeat, vehicle_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleHeartbeat, vehicle_speed_),
  };
  VehicleHeartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehicleHeartbeat_descriptor_,
      VehicleHeartbeat::default_instance_,
      VehicleHeartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleHeartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleHeartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehicleHeartbeat));
  VehicleRoutingInfo_descriptor_ = file->message_type(2);
  static const int VehicleRoutingInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleRoutingInfo, way_points_),
  };
  VehicleRoutingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehicleRoutingInfo_descriptor_,
      VehicleRoutingInfo::default_instance_,
      VehicleRoutingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleRoutingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleRoutingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehicleRoutingInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tutorial_2einfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointLLHA_descriptor_, &PointLLHA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehicleHeartbeat_descriptor_, &VehicleHeartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehicleRoutingInfo_descriptor_, &VehicleRoutingInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tutorial_2einfo_2eproto() {
  delete PointLLHA::default_instance_;
  delete PointLLHA_reflection_;
  delete VehicleHeartbeat::default_instance_;
  delete VehicleHeartbeat_reflection_;
  delete VehicleRoutingInfo::default_instance_;
  delete VehicleRoutingInfo_reflection_;
}

void protobuf_AddDesc_tutorial_2einfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023tutorial.info.proto\022\010tutorial\"j\n\tPoint"
    "LLHA\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001("
    "\001\022\017\n\007heading\030\003 \001(\001\022\020\n\010altitude\030\004 \001(\001\022\025\n\r"
    "timestamp_sec\030\005 \001(\001\"g\n\020VehicleHeartbeat\022"
    "\021\n\tis_normal\030\001 \001(\010\022)\n\014vehicle_pose\030\002 \001(\013"
    "2\023.tutorial.PointLLHA\022\025\n\rvehicle_speed\030\003"
    " \001(\001\"=\n\022VehicleRoutingInfo\022\'\n\nway_points"
    "\030\001 \003(\0132\023.tutorial.PointLLHA", 307);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tutorial.info.proto", &protobuf_RegisterTypes);
  PointLLHA::default_instance_ = new PointLLHA();
  VehicleHeartbeat::default_instance_ = new VehicleHeartbeat();
  VehicleRoutingInfo::default_instance_ = new VehicleRoutingInfo();
  PointLLHA::default_instance_->InitAsDefaultInstance();
  VehicleHeartbeat::default_instance_->InitAsDefaultInstance();
  VehicleRoutingInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tutorial_2einfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tutorial_2einfo_2eproto {
  StaticDescriptorInitializer_tutorial_2einfo_2eproto() {
    protobuf_AddDesc_tutorial_2einfo_2eproto();
  }
} static_descriptor_initializer_tutorial_2einfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PointLLHA::kLongitudeFieldNumber;
const int PointLLHA::kLatitudeFieldNumber;
const int PointLLHA::kHeadingFieldNumber;
const int PointLLHA::kAltitudeFieldNumber;
const int PointLLHA::kTimestampSecFieldNumber;
#endif  // !_MSC_VER

PointLLHA::PointLLHA()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.PointLLHA)
}

void PointLLHA::InitAsDefaultInstance() {
}

PointLLHA::PointLLHA(const PointLLHA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.PointLLHA)
}

void PointLLHA::SharedCtor() {
  _cached_size_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  heading_ = 0;
  altitude_ = 0;
  timestamp_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointLLHA::~PointLLHA() {
  // @@protoc_insertion_point(destructor:tutorial.PointLLHA)
  SharedDtor();
}

void PointLLHA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointLLHA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointLLHA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointLLHA_descriptor_;
}

const PointLLHA& PointLLHA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tutorial_2einfo_2eproto();
  return *default_instance_;
}

PointLLHA* PointLLHA::default_instance_ = NULL;

PointLLHA* PointLLHA::New() const {
  return new PointLLHA;
}

void PointLLHA::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PointLLHA*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(longitude_, timestamp_sec_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointLLHA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.PointLLHA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double longitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // optional double latitude = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_heading;
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (tag == 25) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_altitude;
        break;
      }

      // optional double altitude = 4;
      case 4: {
        if (tag == 33) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_timestamp_sec;
        break;
      }

      // optional double timestamp_sec = 5;
      case 5: {
        if (tag == 41) {
         parse_timestamp_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
          set_has_timestamp_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.PointLLHA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.PointLLHA)
  return false;
#undef DO_
}

void PointLLHA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.PointLLHA)
  // optional double longitude = 1;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // optional double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // optional double heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional double altitude = 4;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->altitude(), output);
  }

  // optional double timestamp_sec = 5;
  if (has_timestamp_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->timestamp_sec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.PointLLHA)
}

::google::protobuf::uint8* PointLLHA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.PointLLHA)
  // optional double longitude = 1;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // optional double latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // optional double heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional double altitude = 4;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->altitude(), target);
  }

  // optional double timestamp_sec = 5;
  if (has_timestamp_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->timestamp_sec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.PointLLHA)
  return target;
}

int PointLLHA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double longitude = 1;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double altitude = 4;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional double timestamp_sec = 5;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointLLHA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointLLHA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointLLHA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointLLHA::MergeFrom(const PointLLHA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_timestamp_sec()) {
      set_timestamp_sec(from.timestamp_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointLLHA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointLLHA::CopyFrom(const PointLLHA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointLLHA::IsInitialized() const {

  return true;
}

void PointLLHA::Swap(PointLLHA* other) {
  if (other != this) {
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(heading_, other->heading_);
    std::swap(altitude_, other->altitude_);
    std::swap(timestamp_sec_, other->timestamp_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointLLHA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointLLHA_descriptor_;
  metadata.reflection = PointLLHA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VehicleHeartbeat::kIsNormalFieldNumber;
const int VehicleHeartbeat::kVehiclePoseFieldNumber;
const int VehicleHeartbeat::kVehicleSpeedFieldNumber;
#endif  // !_MSC_VER

VehicleHeartbeat::VehicleHeartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.VehicleHeartbeat)
}

void VehicleHeartbeat::InitAsDefaultInstance() {
  vehicle_pose_ = const_cast< ::tutorial::PointLLHA*>(&::tutorial::PointLLHA::default_instance());
}

VehicleHeartbeat::VehicleHeartbeat(const VehicleHeartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.VehicleHeartbeat)
}

void VehicleHeartbeat::SharedCtor() {
  _cached_size_ = 0;
  is_normal_ = false;
  vehicle_pose_ = NULL;
  vehicle_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleHeartbeat::~VehicleHeartbeat() {
  // @@protoc_insertion_point(destructor:tutorial.VehicleHeartbeat)
  SharedDtor();
}

void VehicleHeartbeat::SharedDtor() {
  if (this != default_instance_) {
    delete vehicle_pose_;
  }
}

void VehicleHeartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleHeartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleHeartbeat_descriptor_;
}

const VehicleHeartbeat& VehicleHeartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tutorial_2einfo_2eproto();
  return *default_instance_;
}

VehicleHeartbeat* VehicleHeartbeat::default_instance_ = NULL;

VehicleHeartbeat* VehicleHeartbeat::New() const {
  return new VehicleHeartbeat;
}

void VehicleHeartbeat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VehicleHeartbeat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(vehicle_speed_, is_normal_);
    if (has_vehicle_pose()) {
      if (vehicle_pose_ != NULL) vehicle_pose_->::tutorial::PointLLHA::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehicleHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.VehicleHeartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_normal = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_normal_)));
          set_has_is_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicle_pose;
        break;
      }

      // optional .tutorial.PointLLHA vehicle_pose = 2;
      case 2: {
        if (tag == 18) {
         parse_vehicle_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_vehicle_speed;
        break;
      }

      // optional double vehicle_speed = 3;
      case 3: {
        if (tag == 25) {
         parse_vehicle_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_speed_)));
          set_has_vehicle_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.VehicleHeartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.VehicleHeartbeat)
  return false;
#undef DO_
}

void VehicleHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.VehicleHeartbeat)
  // optional bool is_normal = 1;
  if (has_is_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_normal(), output);
  }

  // optional .tutorial.PointLLHA vehicle_pose = 2;
  if (has_vehicle_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vehicle_pose(), output);
  }

  // optional double vehicle_speed = 3;
  if (has_vehicle_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vehicle_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.VehicleHeartbeat)
}

::google::protobuf::uint8* VehicleHeartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.VehicleHeartbeat)
  // optional bool is_normal = 1;
  if (has_is_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_normal(), target);
  }

  // optional .tutorial.PointLLHA vehicle_pose = 2;
  if (has_vehicle_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vehicle_pose(), target);
  }

  // optional double vehicle_speed = 3;
  if (has_vehicle_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vehicle_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.VehicleHeartbeat)
  return target;
}

int VehicleHeartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_normal = 1;
    if (has_is_normal()) {
      total_size += 1 + 1;
    }

    // optional .tutorial.PointLLHA vehicle_pose = 2;
    if (has_vehicle_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vehicle_pose());
    }

    // optional double vehicle_speed = 3;
    if (has_vehicle_speed()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehicleHeartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehicleHeartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleHeartbeat::MergeFrom(const VehicleHeartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_normal()) {
      set_is_normal(from.is_normal());
    }
    if (from.has_vehicle_pose()) {
      mutable_vehicle_pose()->::tutorial::PointLLHA::MergeFrom(from.vehicle_pose());
    }
    if (from.has_vehicle_speed()) {
      set_vehicle_speed(from.vehicle_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehicleHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleHeartbeat::CopyFrom(const VehicleHeartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleHeartbeat::IsInitialized() const {

  return true;
}

void VehicleHeartbeat::Swap(VehicleHeartbeat* other) {
  if (other != this) {
    std::swap(is_normal_, other->is_normal_);
    std::swap(vehicle_pose_, other->vehicle_pose_);
    std::swap(vehicle_speed_, other->vehicle_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehicleHeartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleHeartbeat_descriptor_;
  metadata.reflection = VehicleHeartbeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VehicleRoutingInfo::kWayPointsFieldNumber;
#endif  // !_MSC_VER

VehicleRoutingInfo::VehicleRoutingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.VehicleRoutingInfo)
}

void VehicleRoutingInfo::InitAsDefaultInstance() {
}

VehicleRoutingInfo::VehicleRoutingInfo(const VehicleRoutingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.VehicleRoutingInfo)
}

void VehicleRoutingInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleRoutingInfo::~VehicleRoutingInfo() {
  // @@protoc_insertion_point(destructor:tutorial.VehicleRoutingInfo)
  SharedDtor();
}

void VehicleRoutingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VehicleRoutingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleRoutingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleRoutingInfo_descriptor_;
}

const VehicleRoutingInfo& VehicleRoutingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tutorial_2einfo_2eproto();
  return *default_instance_;
}

VehicleRoutingInfo* VehicleRoutingInfo::default_instance_ = NULL;

VehicleRoutingInfo* VehicleRoutingInfo::New() const {
  return new VehicleRoutingInfo;
}

void VehicleRoutingInfo::Clear() {
  way_points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehicleRoutingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.VehicleRoutingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tutorial.PointLLHA way_points = 1;
      case 1: {
        if (tag == 10) {
         parse_way_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_way_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_way_points;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.VehicleRoutingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.VehicleRoutingInfo)
  return false;
#undef DO_
}

void VehicleRoutingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.VehicleRoutingInfo)
  // repeated .tutorial.PointLLHA way_points = 1;
  for (int i = 0; i < this->way_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->way_points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.VehicleRoutingInfo)
}

::google::protobuf::uint8* VehicleRoutingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.VehicleRoutingInfo)
  // repeated .tutorial.PointLLHA way_points = 1;
  for (int i = 0; i < this->way_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->way_points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.VehicleRoutingInfo)
  return target;
}

int VehicleRoutingInfo::ByteSize() const {
  int total_size = 0;

  // repeated .tutorial.PointLLHA way_points = 1;
  total_size += 1 * this->way_points_size();
  for (int i = 0; i < this->way_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->way_points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleRoutingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehicleRoutingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehicleRoutingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleRoutingInfo::MergeFrom(const VehicleRoutingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  way_points_.MergeFrom(from.way_points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehicleRoutingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleRoutingInfo::CopyFrom(const VehicleRoutingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleRoutingInfo::IsInitialized() const {

  return true;
}

void VehicleRoutingInfo::Swap(VehicleRoutingInfo* other) {
  if (other != this) {
    way_points_.Swap(&other->way_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehicleRoutingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleRoutingInfo_descriptor_;
  metadata.reflection = VehicleRoutingInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
