// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tutorial.info.proto

#ifndef PROTOBUF_tutorial_2einfo_2eproto__INCLUDED
#define PROTOBUF_tutorial_2einfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tutorial_2einfo_2eproto();
void protobuf_AssignDesc_tutorial_2einfo_2eproto();
void protobuf_ShutdownFile_tutorial_2einfo_2eproto();

class PointLLHA;
class VehicleHeartbeat;
class VehicleRoutingInfo;

// ===================================================================

class PointLLHA : public ::google::protobuf::Message {
 public:
  PointLLHA();
  virtual ~PointLLHA();

  PointLLHA(const PointLLHA& from);

  inline PointLLHA& operator=(const PointLLHA& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointLLHA& default_instance();

  void Swap(PointLLHA* other);

  // implements Message ----------------------------------------------

  PointLLHA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointLLHA& from);
  void MergeFrom(const PointLLHA& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double longitude = 1;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  inline double longitude() const;
  inline void set_longitude(double value);

  // optional double latitude = 2;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  inline double latitude() const;
  inline void set_latitude(double value);

  // optional double heading = 3;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 3;
  inline double heading() const;
  inline void set_heading(double value);

  // optional double altitude = 4;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 4;
  inline double altitude() const;
  inline void set_altitude(double value);

  // optional double timestamp_sec = 5;
  inline bool has_timestamp_sec() const;
  inline void clear_timestamp_sec();
  static const int kTimestampSecFieldNumber = 5;
  inline double timestamp_sec() const;
  inline void set_timestamp_sec(double value);

  // @@protoc_insertion_point(class_scope:tutorial.PointLLHA)
 private:
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_timestamp_sec();
  inline void clear_has_timestamp_sec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double longitude_;
  double latitude_;
  double heading_;
  double altitude_;
  double timestamp_sec_;
  friend void  protobuf_AddDesc_tutorial_2einfo_2eproto();
  friend void protobuf_AssignDesc_tutorial_2einfo_2eproto();
  friend void protobuf_ShutdownFile_tutorial_2einfo_2eproto();

  void InitAsDefaultInstance();
  static PointLLHA* default_instance_;
};
// -------------------------------------------------------------------

class VehicleHeartbeat : public ::google::protobuf::Message {
 public:
  VehicleHeartbeat();
  virtual ~VehicleHeartbeat();

  VehicleHeartbeat(const VehicleHeartbeat& from);

  inline VehicleHeartbeat& operator=(const VehicleHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleHeartbeat& default_instance();

  void Swap(VehicleHeartbeat* other);

  // implements Message ----------------------------------------------

  VehicleHeartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleHeartbeat& from);
  void MergeFrom(const VehicleHeartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_normal = 1;
  inline bool has_is_normal() const;
  inline void clear_is_normal();
  static const int kIsNormalFieldNumber = 1;
  inline bool is_normal() const;
  inline void set_is_normal(bool value);

  // optional .tutorial.PointLLHA vehicle_pose = 2;
  inline bool has_vehicle_pose() const;
  inline void clear_vehicle_pose();
  static const int kVehiclePoseFieldNumber = 2;
  inline const ::tutorial::PointLLHA& vehicle_pose() const;
  inline ::tutorial::PointLLHA* mutable_vehicle_pose();
  inline ::tutorial::PointLLHA* release_vehicle_pose();
  inline void set_allocated_vehicle_pose(::tutorial::PointLLHA* vehicle_pose);

  // optional double vehicle_speed = 3;
  inline bool has_vehicle_speed() const;
  inline void clear_vehicle_speed();
  static const int kVehicleSpeedFieldNumber = 3;
  inline double vehicle_speed() const;
  inline void set_vehicle_speed(double value);

  // @@protoc_insertion_point(class_scope:tutorial.VehicleHeartbeat)
 private:
  inline void set_has_is_normal();
  inline void clear_has_is_normal();
  inline void set_has_vehicle_pose();
  inline void clear_has_vehicle_pose();
  inline void set_has_vehicle_speed();
  inline void clear_has_vehicle_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::tutorial::PointLLHA* vehicle_pose_;
  double vehicle_speed_;
  bool is_normal_;
  friend void  protobuf_AddDesc_tutorial_2einfo_2eproto();
  friend void protobuf_AssignDesc_tutorial_2einfo_2eproto();
  friend void protobuf_ShutdownFile_tutorial_2einfo_2eproto();

  void InitAsDefaultInstance();
  static VehicleHeartbeat* default_instance_;
};
// -------------------------------------------------------------------

class VehicleRoutingInfo : public ::google::protobuf::Message {
 public:
  VehicleRoutingInfo();
  virtual ~VehicleRoutingInfo();

  VehicleRoutingInfo(const VehicleRoutingInfo& from);

  inline VehicleRoutingInfo& operator=(const VehicleRoutingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleRoutingInfo& default_instance();

  void Swap(VehicleRoutingInfo* other);

  // implements Message ----------------------------------------------

  VehicleRoutingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleRoutingInfo& from);
  void MergeFrom(const VehicleRoutingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tutorial.PointLLHA way_points = 1;
  inline int way_points_size() const;
  inline void clear_way_points();
  static const int kWayPointsFieldNumber = 1;
  inline const ::tutorial::PointLLHA& way_points(int index) const;
  inline ::tutorial::PointLLHA* mutable_way_points(int index);
  inline ::tutorial::PointLLHA* add_way_points();
  inline const ::google::protobuf::RepeatedPtrField< ::tutorial::PointLLHA >&
      way_points() const;
  inline ::google::protobuf::RepeatedPtrField< ::tutorial::PointLLHA >*
      mutable_way_points();

  // @@protoc_insertion_point(class_scope:tutorial.VehicleRoutingInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::PointLLHA > way_points_;
  friend void  protobuf_AddDesc_tutorial_2einfo_2eproto();
  friend void protobuf_AssignDesc_tutorial_2einfo_2eproto();
  friend void protobuf_ShutdownFile_tutorial_2einfo_2eproto();

  void InitAsDefaultInstance();
  static VehicleRoutingInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PointLLHA

// optional double longitude = 1;
inline bool PointLLHA::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointLLHA::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointLLHA::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointLLHA::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double PointLLHA::longitude() const {
  // @@protoc_insertion_point(field_get:tutorial.PointLLHA.longitude)
  return longitude_;
}
inline void PointLLHA::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.PointLLHA.longitude)
}

// optional double latitude = 2;
inline bool PointLLHA::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointLLHA::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointLLHA::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointLLHA::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double PointLLHA::latitude() const {
  // @@protoc_insertion_point(field_get:tutorial.PointLLHA.latitude)
  return latitude_;
}
inline void PointLLHA::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.PointLLHA.latitude)
}

// optional double heading = 3;
inline bool PointLLHA::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointLLHA::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointLLHA::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointLLHA::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double PointLLHA::heading() const {
  // @@protoc_insertion_point(field_get:tutorial.PointLLHA.heading)
  return heading_;
}
inline void PointLLHA::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:tutorial.PointLLHA.heading)
}

// optional double altitude = 4;
inline bool PointLLHA::has_altitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointLLHA::set_has_altitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointLLHA::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointLLHA::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double PointLLHA::altitude() const {
  // @@protoc_insertion_point(field_get:tutorial.PointLLHA.altitude)
  return altitude_;
}
inline void PointLLHA::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:tutorial.PointLLHA.altitude)
}

// optional double timestamp_sec = 5;
inline bool PointLLHA::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PointLLHA::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PointLLHA::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PointLLHA::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
inline double PointLLHA::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:tutorial.PointLLHA.timestamp_sec)
  return timestamp_sec_;
}
inline void PointLLHA::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:tutorial.PointLLHA.timestamp_sec)
}

// -------------------------------------------------------------------

// VehicleHeartbeat

// optional bool is_normal = 1;
inline bool VehicleHeartbeat::has_is_normal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleHeartbeat::set_has_is_normal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleHeartbeat::clear_has_is_normal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleHeartbeat::clear_is_normal() {
  is_normal_ = false;
  clear_has_is_normal();
}
inline bool VehicleHeartbeat::is_normal() const {
  // @@protoc_insertion_point(field_get:tutorial.VehicleHeartbeat.is_normal)
  return is_normal_;
}
inline void VehicleHeartbeat::set_is_normal(bool value) {
  set_has_is_normal();
  is_normal_ = value;
  // @@protoc_insertion_point(field_set:tutorial.VehicleHeartbeat.is_normal)
}

// optional .tutorial.PointLLHA vehicle_pose = 2;
inline bool VehicleHeartbeat::has_vehicle_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleHeartbeat::set_has_vehicle_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleHeartbeat::clear_has_vehicle_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleHeartbeat::clear_vehicle_pose() {
  if (vehicle_pose_ != NULL) vehicle_pose_->::tutorial::PointLLHA::Clear();
  clear_has_vehicle_pose();
}
inline const ::tutorial::PointLLHA& VehicleHeartbeat::vehicle_pose() const {
  // @@protoc_insertion_point(field_get:tutorial.VehicleHeartbeat.vehicle_pose)
  return vehicle_pose_ != NULL ? *vehicle_pose_ : *default_instance_->vehicle_pose_;
}
inline ::tutorial::PointLLHA* VehicleHeartbeat::mutable_vehicle_pose() {
  set_has_vehicle_pose();
  if (vehicle_pose_ == NULL) vehicle_pose_ = new ::tutorial::PointLLHA;
  // @@protoc_insertion_point(field_mutable:tutorial.VehicleHeartbeat.vehicle_pose)
  return vehicle_pose_;
}
inline ::tutorial::PointLLHA* VehicleHeartbeat::release_vehicle_pose() {
  clear_has_vehicle_pose();
  ::tutorial::PointLLHA* temp = vehicle_pose_;
  vehicle_pose_ = NULL;
  return temp;
}
inline void VehicleHeartbeat::set_allocated_vehicle_pose(::tutorial::PointLLHA* vehicle_pose) {
  delete vehicle_pose_;
  vehicle_pose_ = vehicle_pose;
  if (vehicle_pose) {
    set_has_vehicle_pose();
  } else {
    clear_has_vehicle_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.VehicleHeartbeat.vehicle_pose)
}

// optional double vehicle_speed = 3;
inline bool VehicleHeartbeat::has_vehicle_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleHeartbeat::set_has_vehicle_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleHeartbeat::clear_has_vehicle_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleHeartbeat::clear_vehicle_speed() {
  vehicle_speed_ = 0;
  clear_has_vehicle_speed();
}
inline double VehicleHeartbeat::vehicle_speed() const {
  // @@protoc_insertion_point(field_get:tutorial.VehicleHeartbeat.vehicle_speed)
  return vehicle_speed_;
}
inline void VehicleHeartbeat::set_vehicle_speed(double value) {
  set_has_vehicle_speed();
  vehicle_speed_ = value;
  // @@protoc_insertion_point(field_set:tutorial.VehicleHeartbeat.vehicle_speed)
}

// -------------------------------------------------------------------

// VehicleRoutingInfo

// repeated .tutorial.PointLLHA way_points = 1;
inline int VehicleRoutingInfo::way_points_size() const {
  return way_points_.size();
}
inline void VehicleRoutingInfo::clear_way_points() {
  way_points_.Clear();
}
inline const ::tutorial::PointLLHA& VehicleRoutingInfo::way_points(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.VehicleRoutingInfo.way_points)
  return way_points_.Get(index);
}
inline ::tutorial::PointLLHA* VehicleRoutingInfo::mutable_way_points(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.VehicleRoutingInfo.way_points)
  return way_points_.Mutable(index);
}
inline ::tutorial::PointLLHA* VehicleRoutingInfo::add_way_points() {
  // @@protoc_insertion_point(field_add:tutorial.VehicleRoutingInfo.way_points)
  return way_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::PointLLHA >&
VehicleRoutingInfo::way_points() const {
  // @@protoc_insertion_point(field_list:tutorial.VehicleRoutingInfo.way_points)
  return way_points_;
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::PointLLHA >*
VehicleRoutingInfo::mutable_way_points() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.VehicleRoutingInfo.way_points)
  return &way_points_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tutorial_2einfo_2eproto__INCLUDED
